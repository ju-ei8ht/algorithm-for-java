<java 객체지향언어>

1. 접근제어자
// pkg/ModifierTest package
package pkg;

public class ModifierTest {
    private void messageInside(){
        System.out.println("This is private modifier");
    }

    public void messageOutside(){
        System.out.println("This is public modifier");
        messageInside(); //이렇게 하면 단독으로 private이라 접근하지 못했던 messageInside를 불러낼 수 있다.
    }

    protected void messageProtected(){
        System.out.println("This is protected modifier");
    }

    void messagePackagePrivate(){
        System.out.println("This is package private modifier");
    }
}

// Main
import pkg.ModifierTest;

class Child extends ModifierTest{
    void callParentProtected(){
        System.out.println("call my parent's protected method");
        super.messageProtected();
        //super는 내가 상속받은 부모 클래스를 가리키는 키워드
    }
}

public class Main {
    public static void main(String[] args) {
        ModifierTest modifierTest = new ModifierTest();
        modifierTest.messageOutside();
        modifierTest.messageInside(); //'messageInside()' has private access in 'pkg.ModifierTest'
        modifierTest.messageProtected(); //'messageProtected()' has protected access in 'pkg.ModifierTest'
        modifierTest.messagePackagePrivate(); //'messagePackagePrivate()' is not public in 'pkg.ModifierTest'. Cannot be accessed from outside package

        Child child = new Child();
        child.callParentProtected(); //이렇게 하면 messageProtected 불러낼 수 있다.

    }
}
