<java 객체지향언어>

1. Class
class Phone {
    String model;
    String color;
    int price;
}

public class Main {
    public static void main(String[] args) {
        Phone galaxy = new Phone(); //인스턴스
        galaxy.model = "Galaxy10";
        galaxy.color = "Black";
        galaxy.price = 100;

        Phone iphone =new Phone();
        iphone.model = "iPhoneX";
        iphone.color = "Black";
        iphone.price = 200;


        System.out.println("철수는 이번에 " + galaxy.model + galaxy.color + " + 색상을 " + galaxy.price + "만원에 샀다.");
        System.out.println("영희는 이번에 " + iphone.model + iphone.color + " + 색상을 " + iphone.price + "만원에 샀다.");
    }
}

2. method //어떤 작업을 수행하는 코드를 하나로 묶어놓은 것
int [] heights = new int[] {10,20,30,40,50};

initHeight(heights);//함수를 만들지 않아 에러가 뜸
sortHeight(heights);
//중복된 코드 줄이기 위해, 프로그램의 재사용성 구조화를 위해 쓴다.
//코드 convention: 동사로 시작,camelCase로 작성

int add(int x, int y){
    return x + y;
    or
    int result = x + y;
    return result;
}

3. 인스턴스
class Calculation{
    int add(int x, int y){
        return x + y;
    }
    int subtract(int x, int y){
        return x - y;
    }
}
public class Main{
    public static void main(String[] args){
        Calculation calcutation = new Calculation();
        int addResult = calcutation.add(1,2);
        calcutation.add(3,5);//이런식으로 메소드를 쓸 수 있다.
        int subtractResult = calcutation.subtract(5,3);

        System.out.println(addResult);
        System.out.println(subtractResult);
    }
}