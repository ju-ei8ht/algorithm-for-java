<java 객체지향언어>

1. 상속
class Animal{
    String name;

    public void cry(){
        System.out.println(name + " is crying.");
    }
}

class Dog extends Animal{
    Dog(String name){
        this.name = name;
    }
    public void swim(){
        System.out.println(name + " is swimming.");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog("코코");
        dog.cry();
        dog.swim();

        Animal dog2 = new Dog("미미");
        dog2.cry();
        dog2.swim(); //컴파일 에러 -> 실제 상속은 Animal에서 받았기 때문에 Dog에만 있는 swim을 찾을 수 없음
    }
}

2. overloading
//한 class 내에서 동일한 이름의 method를 여러개 갖는 것
//이름이 같다고 무조건 overloading은 아님
//조건1 method 이름이 동일 / 조건2 매개 변수의 개수나 type이 달라야 한다

int add(int x, int y, int z){
    return x+y+z;
}
long add(int a, int b, int c){
    return a+b+c;
}
//리턴 타입(int, long)이 다르기 때문에 overloading이 아님 ->에러

int add(int x, int y, int z){
    return x+y+z;
}
int add(int a, int b){
    return a+b;
}
//이름은 같고 변수의 개수가 다르기 때문에 overloading에 해당이 됨
//int를 long으로 바꾸고(타입이 다르기 때문에) c가 추가되어도 overloading에 해당이 됨
//기존에 없는 새로운 method를 정의하는데 같은 이름을 가지는 함수를 정의하는 것

3. overring
class Animal{
    String name;
    String color;

    public Animal(String name) {
        this.name = name;
    }

    public void cry(){
        System.out.println(name + " is crying");
    }
}
class Dog extends Animal{
    public Dog(String name) {
        super(name);
    }
    @Override
    public void cry(){
        System.out.println(name + " is barking");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal dog = new Dog("코코");
        dog.cry();
    }
}
//코코 is crying이 아니라 코코 is barking이 출력됨
//부모에 있는 똑같은 함수를 자식이 구현해서 부모에 있는 함수를 없는 체 하는 것